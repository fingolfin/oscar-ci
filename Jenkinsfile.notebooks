// vim:set ft=groovy:
node {
  def errors = 0
  def stdenv = [
    "PATH=${workspace}/local/bin:${env.PATH}",
    "GAPROOT=${workspace}/gap",
  ]
  def nbtest = { String path ->
    try {
      sh "${workspace}/nbtests/jupyter-test ${path}"
    } catch (Exception err) {
      errors++
      currentBuild.result = "SUCCESS"
    }
  }
  stage("Preparation") {
    dir("julia") {
      git url: "https://github.com/julialang/julia",
          branch: "release-1.3"
    }
    dir("nbtests") {
      git url: "https://github.com/rbehrends/jupyter-tests",
          branch: "master"
    }
    dir("notebooks") {
      git url: "https://github.com/oscar-system/OSCARBinder",
          branch: "master"
    }
    dir("gap") {
      git url: "https://github.com/gap-system/gap"
          branch: "stable-4.11"
    }
  }
  stage("Build") {
    sh "mkdir -p ${workspace}/local/bin"
    withEnv(stdenv) {
      dir("julia") {
	sh "make -j8"
	sh "ln -sf ${workspace}/julia/julia ${workspace}/local/bin"
      }
    }
    withEnv(stdenv) {
      dir("gap") {
        sh "./autogen.sh"
	sh "./configure --with-gc=julia --with-julia=${workspace}/julia"
	sh "make -j8"
	sh "test -d pkg || (make bootstrap-pkg-full && cd pkg && ../bin/BuildPackages.sh)"
	sh "ln -sf ${workspace}/gap/bin/gap.sh ${workspace}/local/bin/gap"
      }
    }
    withEnv(stdenv) {
      sh "${workspace}/nbtests/install-oscar"
    }
  }
  stage("Test") {
    withEnv(stdenv) {
      def notebooks = sh(script: "find ${workspace}/notebooks -name *.ipynb",
        returnStdout: true).trim().split("\\r?\\n")
      for (notebook in notebooks) {
	nbtest notebook
      }
      if (errors > 0) {
        currentBuild.result = "FAILURE"
      }
    }
  }
}
